@page "/notes"
@using BrickForge.Models
@using BrickForge.Services
@inject NoteService NoteService

<h3>Notizen</h3>

@if (notes == null)
{
    <p>Lade Notizen...</p>
}
else if (notes.Count == 0)
{
    <p>Keine Notizen vorhanden.</p>
}
else
{
    <ul>
        @foreach (var note in notes)
        {
            <li>
                <strong>@note.Title</strong> <br />
                @note.Content <br />
                <button @onclick="() => DeleteNote(note.Id)">🗑 Löschen</button>
            </li>
        }
    </ul>
}

<h4>Neue Notiz hinzufügen</h4>
<input type="text" @bind="newNoteTitle" placeholder="Titel" />
<textarea @bind="newNoteContent" placeholder="Inhalt"></textarea>
<button @onclick="AddNote">Speichern</button>

@code {
    private List<Note> notes;
    private string newNoteTitle;
    private string newNoteContent;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            notes = await NoteService.GetNotesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notes: {ex.Message}");
        }
    }

    private async Task AddNote()
    {
        Console.WriteLine("AddNote method called");
        try
        {
            if (!string.IsNullOrWhiteSpace(newNoteTitle) && !string.IsNullOrWhiteSpace(newNoteContent))
            {
                Console.WriteLine($"Creating new note with title: {newNoteTitle}");
                var newNote = new Note { Title = newNoteTitle, Content = newNoteContent };
                await NoteService.CreateNoteAsync(newNote);
                notes = await NoteService.GetNotesAsync();
                newNoteTitle = "";
                newNoteContent = "";
                StateHasChanged(); // Ensure the UI is updated
            }
            else
            {
                Console.WriteLine("Title or Content is empty");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding note: {ex.Message}");
        }
    }

    private async Task DeleteNote(int id)
    {
        try
        {
            await NoteService.DeleteNoteAsync(id);
            notes = await NoteService.GetNotesAsync();
            StateHasChanged(); // Ensure the UI is updated
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting note: {ex.Message}");
        }
    }
}
